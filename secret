        _G.ESPFramework = {}
        _G.ESPFramework.__index = _G.ESPFramework
        
        local math_floor = math.floor
        local math_rad = math.rad
        local math_tan = math.tan
        
        function _G.ESPFramework:Round_V2(V2)
            return Vector2.new(math_floor(V2.X + 0.5), math_floor(V2.Y + 0.5))
        end
        
        function _G.ESPFramework:V3_To_V2(V3)
            return Vector2.new(V3.X, V3.Y)
        end
        
        function _G.ESPFramework:Draw(Object, Properties)
            local obj = Drawing.new(Object)
            for prop, val in pairs(Properties) do
                obj[prop] = val
            end
            return obj
        end
        
        function _G.ESPFramework:Drawing_Transparency(Transparency)
            return 1 - Transparency
        end
        
        function _G.ESPFramework:Create_Gradient_Color(Percentage)
            local t = Percentage <= 0.5 and Percentage / 0.5 or (Percentage - 0.5) / 0.5
            return Color3.new(Percentage <= 0.5 and t or 1, Percentage <= 0.5 and 1 or 1 - t, 0)
        end
        
        _G.ESP = {
            Settings = {
                Enabled = false,
                Bold_Text = false,
                Team_Check = false,
                Maximal_Distance = 5000,
                Font = 2,
                TargetNPCs = false,
                Highlight = {Enabled = false, Color = Color3.new(1, 0, 0), Target = ""},
                Box = {Enabled = false, Color = Color3.new(1, 1, 1), Transparency = 0},
                Box_Outline = {Enabled = false, Color = Color3.new(0, 0, 0), Transparency = 0, Outline_Size = 1},
                Healthbar = {Enabled = false, Position = "Left", Color = Color3.new(1, 1, 1), GradientSegments = 20},
                Name = {Enabled = false, Position = "Top", Color = Color3.new(1, 1, 1), Transparency = 0, OutlineColor = Color3.new(0, 0, 0)},
                Distance = {Enabled = false, Position = "Right", Color = Color3.new(1, 1, 1), Transparency = 0, OutlineColor = Color3.new(0, 0, 0)},
                Tool = {Enabled = false, Position = "Bottom", Color = Color3.new(1, 1, 1), Transparency = 0, OutlineColor = Color3.new(0, 0, 0)},
                Health = {Enabled = false, Position = "Left", Color = Color3.new(1, 1, 1), Transparency = 0, OutlineColor = Color3.new(0, 0, 0)},
                Skeleton = {Enabled = false, Color = Color3.new(1, 1, 1), Transparency = 0, OutlineColor = Color3.new(0, 0, 0)},
                ViewAngle = {Enabled = false, Color = Color3.new(1, 1, 1), Transparency = 0, OutlineColor = Color3.new(0, 0, 0), Length = 2},
                Visibility = {Enabled = false, Position = "Right", ColorVisible = Color3.new(0, 1, 0), ColorObstructed = Color3.new(1, 0, 0), Transparency = 0, OutlineColor = Color3.new(0, 0, 0)},
            },
            Objects = {},
            Overrides = {},
            ProcessedModels = setmetatable({}, {__mode = "k"}),
        }
        _G.ESP.__index = _G.ESP

        function _G.ESP:GetObject(Object)
            return self.Objects[Object]
        end
        
        function _G.ESP:Toggle(State)
            self.Settings.Enabled = State
            if not State then
                for _, object in pairs(self.Objects) do
                    if object.Type == "NPC" then
                        object:Destroy()
                    end
                end
            elseif self.Settings.TargetNPCs then
                InitializeESPNPCs()
            end
        end
        
        function _G.ESP:ToggleNPCs(State)
            self.Settings.TargetNPCs = State
            if not State then
                for _, object in pairs(self.Objects) do
                    if object.Type == "NPC" then
                        object:Destroy()
                    end
                end
            else
                InitializeESPNPCs()
            end
        end
        
        function _G.ESP:Get_Team(Entity)
            return self.Overrides.Get_Team and self.Overrides.Get_Team(Entity) or (Entity:IsA("Player") and Entity.Team or nil)
        end
        
        function _G.ESP:Get_Character(Entity)
            return self.Overrides.Get_Character and self.Overrides.Get_Character(Entity) or (Entity:IsA("Player") and Entity.Character or Entity:IsA("Model") and Entity or nil)
        end
        
        function _G.ESP:Get_Tool(Entity)
            if self.Overrides.Get_Tool then
                return self.Overrides.Get_Tool(Entity)
            end
            local Character = self:Get_Character(Entity)
            if Character then
                for _, child in ipairs(Character:GetChildren()) do
                    if child:IsA("Tool") then
                        return child.Name
                    end
                end
            end
            return ""
        end
        
        function _G.ESP:Get_Health(Entity)
            if self.Overrides.Get_Health then
                return self.Overrides.Get_Health(Entity)
            end
            local Character = self:Get_Character(Entity)
            if Character then
                local Humanoid = Character:FindFirstChildOfClass("Humanoid")
                if Humanoid then
                    return Humanoid.Health
                end
            end
            return 100
        end
        
        local Player_Metatable = {}
        Player_Metatable.__index = Player_Metatable
        
        function Player_Metatable:Destroy()
            local Components = self.Components
            for _, component in pairs(Components) do
                if type(component) == "table" then
                    for _, item in ipairs(component) do
                        item.Visible = false
                        item:Remove()
                    end
                else
                    component.Visible = false
                    component:Remove()
                end
            end
            _G.ESP.Objects[self.Entity] = nil
            _G.ESP.ProcessedModels[self.Entity] = nil
        end
        
        function Player_Metatable:Update()
            local Settings = _G.ESP.Settings
            if not Settings.Enabled then
                self:HideAllComponents()
                return
            end
        
            local Components = self.Components
            local Character = _G.ESP:Get_Character(self.Entity)
            if not Character then
                self:HideAllComponents()
                return
            end
        
            local Head = Character:FindFirstChild("Head")
            local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
            local Humanoid = Character:FindFirstChildOfClass("Humanoid")
            if not (Head and HumanoidRootPart and Humanoid and Humanoid.Health > 0) then
                self:HideAllComponents()
                return
            end
        
            local Current_Health = _G.ESP:Get_Health(self.Entity)
            local Health_Maximum = Humanoid.MaxHealth
            self.TargetHealth = Current_Health
            self.DisplayedHealth = self.DisplayedHealth + (self.TargetHealth - self.DisplayedHealth) * 0.05
        
            local HRP_Position, On_Screen = Camera:WorldToViewportPoint(HumanoidRootPart.Position)
            if not On_Screen then
                self:HideAllComponents()
                return
            end
        
            local Stud_Distance = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") 
                and math_floor((LocalPlayer.Character.HumanoidRootPart.Position - HumanoidRootPart.Position).Magnitude + 0.5) 
                or math_floor(HRP_Position.Z + 0.5)
        
            if Stud_Distance >= Settings.Maximal_Distance then
                self:HideAllComponents()
                return
            end
        
            if Settings.Team_Check and _G.ESP:Get_Team(self.Entity) == _G.ESP:Get_Team(LocalPlayer) then
                self:HideAllComponents()
                return
            end
        
            local scale = 1000 / (HRP_Position.Z * math_tan(math_rad(Camera.FieldOfView * 0.5)) * 2)
            local width = math_floor(3 * scale)
            local height = math_floor(6 * scale)
            local x = math_floor(HRP_Position.X)
            local y = math_floor(HRP_Position.Y)
            local xPosition = math_floor(x - width * 0.5)
            local yPosition = math_floor(y - height * 0.5 + 0.5 * scale)
            local Box_Size = Vector2.new(width, height)
            local Box_Position = Vector2.new(xPosition, yPosition)
        
            local Highlight_Settings = Settings.Highlight
            local Is_Highlighted = Highlight_Settings.Enabled and Highlight_Settings.Target == Character
            local Highlight_Color = Highlight_Settings.Color
            local Offsets = {Top = 0, Bottom = 0, Left = 0, Right = 0}
        
            local Box_Settings = Settings.Box
            if Box_Settings.Enabled then
                local Box = Components.Box
                Box.Size = Box_Size
                Box.Position = Box_Position
                Box.Color = Is_Highlighted and Highlight_Color or Box_Settings.Color
                Box.Transparency = 1 - Box_Settings.Transparency
                Box.Visible = true
        
                local Box_Outline_Settings = Settings.Box_Outline
                if Box_Outline_Settings.Enabled then
                    local Box_Outline = Components.Box_Outline
                    Box_Outline.Size = Box_Size
                    Box_Outline.Position = Box_Position
                    Box_Outline.Color = Box_Outline_Settings.Color
                    Box_Outline.Thickness = Box_Outline_Settings.Outline_Size + 1
                    Box_Outline.Transparency = 1 - Box_Outline_Settings.Transparency
                    Box_Outline.Visible = true
                else
                    Components.Box_Outline.Visible = false
                end
            else
                Components.Box.Visible = false
                Components.Box_Outline.Visible = false
            end
        
local Healthbar_Settings = Settings.Healthbar
if Healthbar_Settings.Enabled then
    local Healthbar_Outline = Components.Healthbar_Outline
    local HealthbarSegments = Components.HealthbarSegments
    local Healthbar_Position = Healthbar_Settings.Position
    local SegmentCount = Healthbar_Settings.GradientSegments
    local HealthPercentage = self.DisplayedHealth / Health_Maximum

    local Healthbar_Width = 3
    local Healthbar_Height = Box_Size.Y - 4
    local Healthbar_Size = Vector2.new(Healthbar_Width, Healthbar_Height)
    local Healthbar_Top_Size = Vector2.new(Box_Size.X - 4, 3)

    if Healthbar_Position == "Left" then
        Healthbar_Outline.Size = Healthbar_Size
        Healthbar_Outline.Position = Vector2.new(xPosition - 5, yPosition + 2)
        local SegmentHeight = Healthbar_Size.Y / SegmentCount
        for i, Segment in ipairs(HealthbarSegments) do
            local SegmentPercentage = (i - 1) / (SegmentCount - 1)
            Segment.Size = Vector2.new(1, SegmentHeight)
            Segment.Position = Healthbar_Outline.Position + Vector2.new(1, SegmentHeight * (i - 1))
            Segment.Color = _G.ESPFramework:Create_Gradient_Color(SegmentPercentage)
            Segment.Visible = HealthPercentage > (1 - SegmentPercentage - (1 / SegmentCount))
        end
    elseif Healthbar_Position == "Right" then
        Healthbar_Outline.Size = Healthbar_Size
        Healthbar_Outline.Position = Vector2.new(xPosition + width + 2, yPosition + 2)
        local SegmentHeight = Healthbar_Size.Y / SegmentCount
        for i, Segment in ipairs(HealthbarSegments) do
            local SegmentPercentage = (i - 1) / (SegmentCount - 1)
            Segment.Size = Vector2.new(1, SegmentHeight)
            Segment.Position = Healthbar_Outline.Position + Vector2.new(1, SegmentHeight * (i - 1))
            Segment.Color = _G.ESPFramework:Create_Gradient_Color(SegmentPercentage)
            Segment.Visible = HealthPercentage > (1 - SegmentPercentage - (1 / SegmentCount))
        end
    elseif Healthbar_Position == "Top" then
        Healthbar_Outline.Size = Healthbar_Top_Size
        Healthbar_Outline.Position = Vector2.new(xPosition + 2, yPosition - 5)
        Offsets.Top = Offsets.Top + 6
        local SegmentWidth = Healthbar_Top_Size.X / SegmentCount
        for i, Segment in ipairs(HealthbarSegments) do
            local SegmentPercentage = (i - 1) / (SegmentCount - 1)
            Segment.Size = Vector2.new(SegmentWidth, 1)
            Segment.Position = Healthbar_Outline.Position + Vector2.new((SegmentWidth * (i - 1)) + 1, 1)
            Segment.Color = _G.ESPFramework:Create_Gradient_Color(SegmentPercentage)
            Segment.Visible = HealthPercentage >= (SegmentPercentage - (1 / SegmentCount))
        end
    elseif Healthbar_Position == "Bottom" then
        Healthbar_Outline.Size = Healthbar_Top_Size
        Healthbar_Outline.Position = Vector2.new(xPosition + 2, yPosition + height + 2)
        Offsets.Bottom = Offsets.Bottom + 6
        local SegmentWidth = Healthbar_Top_Size.X / SegmentCount
        for i, Segment in ipairs(HealthbarSegments) do
            local SegmentPercentage = (i - 1) / (SegmentCount - 1)
            Segment.Size = Vector2.new(SegmentWidth, 1)
            Segment.Position = Healthbar_Outline.Position + Vector2.new((SegmentWidth * (i - 1)) + 1, 1)
            Segment.Color = _G.ESPFramework:Create_Gradient_Color(SegmentPercentage)
            Segment.Visible = HealthPercentage >= (SegmentPercentage - (1 / SegmentCount))
        end
    end
    Healthbar_Outline.Visible = true
else
    Components.Healthbar_Outline.Visible = false
    for _, Segment in ipairs(Components.HealthbarSegments) do
        Segment.Visible = false
    end
end
        
function UpdateTextComponent(Component, Bold, Settings, Position, Text, Offsets, Is_Highlighted, Highlight_Color, Box_Position, Box_Size)
    if not Settings.Enabled then
        Component.Visible = false
        Bold.Visible = false
        return
    end

    Component.Text = Text
    Bold.Text = Text
    local TextBounds = Component.TextBounds
    if not TextBounds then
        Component.Visible = false
        Bold.Visible = false
        return
    end

    if Position == "Top" then
        Component.Position = Vector2.new(Box_Position.X + Box_Size.X / 2, Box_Position.Y - TextBounds.Y - Offsets.Top)
        Offsets.Top = Offsets.Top + TextBounds.Y + 2
    elseif Position == "Bottom" then
        Component.Position = Vector2.new(Box_Position.X + Box_Size.X / 2, Box_Position.Y + Box_Size.Y + Offsets.Bottom)
        Offsets.Bottom = Offsets.Bottom + TextBounds.Y + 2
    elseif Position == "Left" then
        Component.Position = Vector2.new(Box_Position.X - TextBounds.X / 2 - 5, Box_Position.Y + Box_Size.Y / 2 + Offsets.Left)
        Offsets.Left = Offsets.Left + TextBounds.Y + 2
    elseif Position == "Right" then
        Component.Position = Vector2.new(Box_Position.X + Box_Size.X + 10, Box_Position.Y)
        Offsets.Top = Offsets.Top + TextBounds.Y + 2
    end

    Component.Color = Is_Highlighted and Highlight_Color or Settings.Color
    Component.OutlineColor = Settings.OutlineColor
    Component.Transparency = 1 - Settings.Transparency
    Component.Visible = true

    Bold.Position = Component.Position + Vector2.new(1, 0)
    Bold.Color = Component.Color
    Bold.OutlineColor = Settings.OutlineColor
    Bold.Transparency = 1 - Settings.Transparency
    Bold.Visible = Settings.Bold_Text or false
end
        
            UpdateTextComponent(Components.Name, Components.NameBold, Settings.Name, Settings.Name.Position, 
            self.Entity:IsA("Player") and self.Entity.Name or self.Entity.Name, Offsets, Is_Highlighted, Highlight_Color, Box_Position, Box_Size)
        UpdateTextComponent(Components.Distance, Components.DistanceBold, Settings.Distance, Settings.Distance.Position, 
            Stud_Distance .. "s", Offsets, Is_Highlighted, Highlight_Color, Box_Position, Box_Size)
        UpdateTextComponent(Components.Tool, Components.ToolBold, Settings.Tool, Settings.Tool.Position, 
            _G.ESP:Get_Tool(self.Entity), Offsets, Is_Highlighted, Highlight_Color, Box_Position, Box_Size)
        UpdateTextComponent(Components.Health, Components.HealthBold, Settings.Health, Settings.Health.Position, 
            tostring(math_floor(self.DisplayedHealth + 0.5)), Offsets, Is_Highlighted, Highlight_Color, Box_Position, Box_Size)
        
            local Visibility_Settings = Settings.Visibility
            if Visibility_Settings.Enabled then
                local isVisible = false
                local cameraPos = Camera.CFrame.Position
                local targetPos = HumanoidRootPart.Position
                local direction = targetPos - cameraPos
                local ray = Ray.new(cameraPos, direction)
                local ignoreList = {Camera, LocalPlayer.Character}
                local hit = Workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
                isVisible = not hit or hit:IsDescendantOf(Character)
            
                local Visibility = Components.Visibility
                local VisibilityBold = Components.VisibilityBold
                local TextBounds = Visibility.TextBounds
                if TextBounds then
                    Visibility.Position = Vector2.new(Box_Position.X + Box_Size.X + 10, Box_Position.Y + Offsets.Top)
                    Offsets.Top = Offsets.Top + TextBounds.Y + 2
                    Visibility.Color = isVisible and Visibility_Settings.ColorVisible or Visibility_Settings.ColorObstructed
                    Visibility.OutlineColor = Settings.Distance.OutlineColor
                    Visibility.Transparency = 1 - Settings.Distance.Transparency
                    Visibility.Visible = true
            
                    VisibilityBold.Position = Visibility.Position + Vector2.new(1, 0)
                    VisibilityBold.Color = Visibility.Color
                    VisibilityBold.OutlineColor = Settings.Distance.OutlineColor
                    VisibilityBold.Transparency = 1 - Settings.Distance.Transparency
                    VisibilityBold.Visible = Settings.Bold_Text
                else
                    Visibility.Visible = false
                    VisibilityBold.Visible = false
                end
            else
                Components.Visibility.Visible = false
                Components.VisibilityBold.Visible = false
            end
        
            local Skeleton_Settings = Settings.Skeleton
            if Skeleton_Settings.Enabled then
                local IsR15 = Humanoid.RigType == Enum.HumanoidRigType.R15
                local BodyParts = IsR15 and {
                    {From = "Head", To = "UpperTorso"},
                    {From = "UpperTorso", To = "LowerTorso"},
                    {From = "UpperTorso", To = "LeftUpperArm"},
                    {From = "LeftUpperArm", To = "LeftLowerArm"},
                    {From = "UpperTorso", To = "RightUpperArm"},
                    {From = "RightUpperArm", To = "RightLowerArm"},
                    {From = "LowerTorso", To = "LeftUpperLeg"},
                    {From = "LowerTorso", To = "RightUpperLeg"},
                    {From = "LeftUpperLeg", To = "LeftLowerLeg"},
                    {From = "RightUpperLeg", To = "RightLowerLeg"},
                } or {
                    {From = "Head", To = "Torso"},
                    {From = "Torso", To = "Left Arm"},
                    {From = "Torso", To = "Right Arm"},
                    {From = "Torso", To = "Left Leg"},
                    {From = "Torso", To = "Right Leg"},
                }
                for i, PartPair in ipairs(BodyParts) do
                    local FromPart = Character:FindFirstChild(PartPair.From)
                    local ToPart = Character:FindFirstChild(PartPair.To)
                    local Line = Components.SkeletonLines[i]
                    local Outline = Components.SkeletonOutlines[i]
                    if FromPart and ToPart then
                        local FromPos, FromVisible = Camera:WorldToViewportPoint(FromPart.Position)
                        local ToPos, ToVisible = Camera:WorldToViewportPoint(ToPart.Position)
                        if FromVisible and ToVisible then
                            local FromV2 = _G.ESPFramework:Round_V2(_G.ESPFramework:V3_To_V2(FromPos))
                            local ToV2 = _G.ESPFramework:Round_V2(_G.ESPFramework:V3_To_V2(ToPos))
                            Line.From = FromV2
                            Line.To = ToV2
                            Line.Color = Is_Highlighted and Highlight_Color or Skeleton_Settings.Color
                            Line.Transparency = 1 - Skeleton_Settings.Transparency
                            Line.Visible = true
                            Outline.From = FromV2
                            Outline.To = ToV2
                            Outline.Color = Skeleton_Settings.OutlineColor
                            Outline.Transparency = 1 - Skeleton_Settings.Transparency
                            Outline.Visible = true
                        else
                            Line.Visible = false
                            Outline.Visible = false
                        end
                    else
                        Line.Visible = false
                        Outline.Visible = false
                    end
                end
            else
                for _, Line in ipairs(Components.SkeletonLines) do
                    Line.Visible = false
                end
                for _, Outline in ipairs(Components.SkeletonOutlines) do
                    Outline.Visible = false
                end
            end
        
            local ViewAngle_Settings = Settings.ViewAngle
            if ViewAngle_Settings.Enabled and Head then
                local HeadPos = Head.Position
                local EndPos = HeadPos + Head.CFrame.LookVector * ViewAngle_Settings.Length
                local StartScreenPos, StartVisible = Camera:WorldToViewportPoint(HeadPos)
                local EndScreenPos, EndVisible = Camera:WorldToViewportPoint(EndPos)
                if StartVisible and EndVisible then
                    local ViewAngle = Components.ViewAngle
                    local ViewAngleOutline = Components.ViewAngleOutline
                    ViewAngle.From = _G.ESPFramework:Round_V2(_G.ESPFramework:V3_To_V2(StartScreenPos))
                    ViewAngle.To = _G.ESPFramework:Round_V2(_G.ESPFramework:V3_To_V2(EndScreenPos))
                    ViewAngle.Color = Is_Highlighted and Highlight_Color or ViewAngle_Settings.Color
                    ViewAngle.Transparency = 1 - ViewAngle_Settings.Transparency
                    ViewAngle.Visible = true
                    ViewAngleOutline.From = ViewAngle.From
                    ViewAngleOutline.To = ViewAngle.To
                    ViewAngleOutline.Color = ViewAngle_Settings.OutlineColor
                    ViewAngleOutline.Transparency = 1 - ViewAngle_Settings.Transparency
                    ViewAngleOutline.Visible = true
                else
                    Components.ViewAngle.Visible = false
                    Components.ViewAngleOutline.Visible = false
                end
            else
                Components.ViewAngle.Visible = false
                Components.ViewAngleOutline.Visible = false
            end
        end
        
        function Player_Metatable:HideAllComponents()
            local Components = self.Components
            Components.Box.Visible = false
            Components.Box_Outline.Visible = false
            Components.Healthbar_Outline.Visible = false
            for _, Segment in ipairs(Components.HealthbarSegments) do
                Segment.Visible = false
            end
            Components.Name.Visible = false
            Components.NameBold.Visible = false
            Components.Distance.Visible = false
            Components.DistanceBold.Visible = false
            Components.Tool.Visible = false
            Components.ToolBold.Visible = false
            Components.Health.Visible = false
            Components.HealthBold.Visible = false
            for _, Line in ipairs(Components.SkeletonLines) do
                Line.Visible = false
            end
            for _, Outline in ipairs(Components.SkeletonOutlines) do
                Outline.Visible = false
            end
            Components.ViewAngle.Visible = false
            Components.ViewAngleOutline.Visible = false
            Components.Visibility.Visible = false
            Components.VisibilityBold.Visible = false
        end
        
        function _G.ESP:Player(Instance, Data)
            if not Instance then
                return warn("error: function ESP.Player argument #1 expected Player or Model, got nil")
            end
            Data = Data or {Entity = Instance}
        
            local Object = setmetatable({
                Entity = Data.Entity or Instance,
                Components = {},
                Type = Instance:IsA("Player") and "Player" or "NPC",
                DisplayedHealth = 100,
                TargetHealth = 100
            }, Player_Metatable)
        
            local existing = self:GetObject(Instance)
            if existing then
                existing:Destroy()
            end
        
            local Components = Object.Components
            local Settings = self.Settings
            Components.Box = _G.ESPFramework:Draw("Square", {Thickness = 0.5, ZIndex = 2})
            Components.Box_Outline = _G.ESPFramework:Draw("Square", {Thickness = 1.5, ZIndex = 1})
            Components.HealthbarSegments = {}
            for i = 1, Settings.Healthbar.GradientSegments do
                Components.HealthbarSegments[i] = _G.ESPFramework:Draw("Square", {Thickness = 0, ZIndex = 2, Filled = true})
            end
            Components.Healthbar_Outline = _G.ESPFramework:Draw("Square", {Thickness = 1.5, ZIndex = 1, Filled = true})
            local instanceName = Instance:IsA("Player") and Instance.Name or Instance.Name
            Components.Name = _G.ESPFramework:Draw("Text", {Text = instanceName, Font = Settings.Font, Size = 13, Outline = true, Center = true})
            Components.NameBold = _G.ESPFramework:Draw("Text", {Text = instanceName, Font = Settings.Font, Size = 13, Center = true})
            Components.Distance = _G.ESPFramework:Draw("Text", {Font = Settings.Font, Size = 13, Outline = true, Center = true})
            Components.DistanceBold = _G.ESPFramework:Draw("Text", {Font = Settings.Font, Size = 13, Center = true})
            Components.Tool = _G.ESPFramework:Draw("Text", {Font = Settings.Font, Size = 13, Outline = true, Center = true})
            Components.ToolBold = _G.ESPFramework:Draw("Text", {Font = Settings.Font, Size = 13, Center = true})
            Components.Health = _G.ESPFramework:Draw("Text", {Font = Settings.Font, Size = 13, Outline = true, Center = true})
            Components.HealthBold = _G.ESPFramework:Draw("Text", {Font = Settings.Font, Size = 13, Center = true})
            Components.SkeletonLines = {}
            Components.SkeletonOutlines = {}
            for i = 1, 10 do
                Components.SkeletonLines[i] = _G.ESPFramework:Draw("Line", {Thickness = 1, ZIndex = 2})
                Components.SkeletonOutlines[i] = _G.ESPFramework:Draw("Line", {Thickness = 2, ZIndex = 1})
            end
            Components.ViewAngle = _G.ESPFramework:Draw("Line", {Thickness = 1, ZIndex = 2})
            Components.ViewAngleOutline = _G.ESPFramework:Draw("Line", {Thickness = 2, ZIndex = 1})
            Components.Visibility = _G.ESPFramework:Draw("Text", {Text = "VIS", Font = Settings.Font, Size = 13, Outline = true, Center = true})
            Components.VisibilityBold = _G.ESPFramework:Draw("Text", {Text = "VIS", Font = Settings.Font, Size = 13, Center = true})
        
            self.Objects[Instance] = Object
            self.ProcessedModels[Instance] = true
            return Object
        end
        
        function InitializeESPNPCs()
            if not _G.ESP.Settings.TargetNPCs then
                for _, object in pairs(_G.ESP.Objects) do
                    if object.Type == "NPC" then
                        object:Destroy()
                    end
                end
                return
            end
        
            for _, model in ipairs(Workspace:GetDescendants()) do
                if model:IsA("Model") and model ~= LocalPlayer.Character and not _G.ESP.ProcessedModels[model] then
                    local humanoid = model:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid.Health > 0 and not Players:GetPlayerFromCharacter(model) then
                        _G.ESP:Player(model)
                    end
                    _G.ESP.ProcessedModels[model] = true
                end
            end
        end
        
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                _G.ESP:Player(player)
            end
        end
        
        Players.PlayerAdded:Connect(function(player)
            if player ~= LocalPlayer then
                _G.ESP:Player(player)
            end
        end)
        
        Players.PlayerRemoving:Connect(function(player)
            local obj = _G.ESP:GetObject(player)
            if obj then
                obj:Destroy()
            end
        end)
        
        Workspace.DescendantAdded:Connect(function(descendant)
            if _G.ESP.Settings.TargetNPCs and descendant:IsA("Model") and not _G.ESP.ProcessedModels[descendant] then
                local humanoid = descendant:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.Health > 0 and not Players:GetPlayerFromCharacter(descendant) then
                    _G.ESP:Player(descendant)
                end
                _G.ESP.ProcessedModels[descendant] = true
            end
        end)
        
        Workspace.DescendantRemoving:Connect(function(descendant)
            local obj = _G.ESP:GetObject(descendant)
            if obj and obj.Type == "NPC" then
                obj:Destroy()
            end
        end)
        
        _G.Connection = RunService.RenderStepped:Connect(function()
            for _, Object in pairs(_G.ESP.Objects) do
                Object:Update()
            end
        end)
        
        if _G.ESP.Settings.TargetNPCs then
            InitializeESPNPCs()
        end
